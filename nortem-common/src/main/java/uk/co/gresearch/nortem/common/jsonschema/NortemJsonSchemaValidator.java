package uk.co.gresearch.nortem.common.jsonschema;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.github.fge.jsonschema.core.report.ProcessingReport;
import com.github.fge.jsonschema.main.JsonSchema;
import com.github.fge.jsonschema.main.JsonSchemaFactory;
import com.github.reinert.jjschema.v1.JsonSchemaV4Factory;
import org.apache.commons.lang3.exception.ExceptionUtils;
import uk.co.gresearch.nortem.common.result.NortemAttributes;
import uk.co.gresearch.nortem.common.result.NortemResult;

/**
 * Validator uses json schema generated by com.github.reinert.jjschema in order to
 * - use default values from Dto classes
 * - preserve ordering of fields from Dto classes
 *
 */

public class NortemJsonSchemaValidator implements JsonSchemaValidator {
    private static final String INVALID_INSTANCE_MSG = "Invalid json specification";
    private final String schemaStr;
    private final JsonSchema validationSchema;
    private final ObjectReader jsonReader;

    public NortemJsonSchemaValidator(Class<?> clazz) throws Exception {
        com.github.reinert.jjschema.v1.JsonSchemaFactory schemaFactory = new JsonSchemaV4Factory();
        JsonNode configSchema = schemaFactory.createSchema(clazz);

        ModelHelper modelHelper = ModelHelper.createModelHelper(clazz);
        ObjectNode enrichedSchema = modelHelper.getEnrichedSchema(configSchema);

        ObjectMapper mapper = new ObjectMapper();
        Object json = mapper.readValue(enrichedSchema.toString(), Object.class);
        schemaStr = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(json);
        validationSchema = JsonSchemaFactory.byDefault().getJsonSchema(enrichedSchema);
        jsonReader = new ObjectMapper().readerFor(clazz);
    }

    @Override
    public NortemResult getJsonSchema() {
        NortemAttributes attr = new NortemAttributes();
        attr.setJsonSchema(schemaStr);
        return new NortemResult(NortemResult.StatusCode.OK, attr);
    }

    @Override
    public NortemResult validate(String json) {
        try {
            JsonNode jsonNode = jsonReader.readTree(json);
            ProcessingReport report = this.validationSchema.validate(jsonNode);
            if (!report.isSuccess()) {
                return NortemResult.fromErrorMessage(report.toString());
            }

            if (!validationSchema.validInstance(jsonNode)) {
                return NortemResult.fromErrorMessage(INVALID_INSTANCE_MSG);
            }

            return new NortemResult(NortemResult.StatusCode.OK, new NortemAttributes());
        } catch(Exception e){
            return NortemResult.fromErrorMessage(ExceptionUtils.getStackTrace(e));
        }
    }
}
